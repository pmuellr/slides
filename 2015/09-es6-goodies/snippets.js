Snippets = {
    "Line-Poster.js": "\"use strict\"\n\nconst _ = require(\"underscore\")\n\nconst interpolate = require(\"./interpolate\")\n\nmodule.exports = function LinePoster(lines) {\n  lines = lines || []\n\n  return function p(strings /*, value, value */) {\n    if (!strings) return lines.join('\\n')\n\n    const values = _.toArray(arguments).slice(1)\n\n    lines.push( interpolate(strings, values))\n  }\n}\n",
    "arrow-function.js": "const foo = ()    => console.log(\"in foo\")\n            // ~like function foo() { console.log(...) }\nconst bar = x     => console.log(\"in bar with\", x)\n            // ~like function bar(x) { console.log(...) }\nconst gru = (x,y) => console.log(\"in gru with\", x, y)\n            // ~like function gru(x,y) { console.log(...) }\nconst pup = () => {\n  console.log(\"in pup with\")\n  console.log(\"...nothing\")\n}\n\nfoo(); bar(42); gru(1,99); pup()\n\n// prints:\n// in foo\n// in bar with 42\n// in gru with 1 99\n// in pup with\n// ...nothing\n",
    "arrow-in-class.js": "\"use strict\"\n\nclass FakeTransaction {\n  expensiveThing(cb) {\n    setTimeout( () => this.expensiveThingDone(cb), 500)\n    //                ^^^^ look ma, no bind() or self/that\n  }\n\n  expensiveThingDone(cb) {\n    cb()\n  }\n}\n\nnew FakeTransaction().expensiveThing(\n  () => console.log(\"expensive thing done!\")\n)\n\n// prints: \"expensive thing done\"\n",
    "interpolate.js": "const _ = require(\"underscore\")\n\n//-----------------------------------------------------------------\n// f([a1,a2,..], [b1,b2,..]) -> \"\" + a1 + b1 + a2 + b2 ...\n//-----------------------------------------------------------------\n\nmodule.exports = function interpolate(strings, values) {\n\n  // zip([a1,a2,..], [b1,b2,..])) -> [[a1,b1], [a2,b2], ...]\n  strings = _.zip(strings, values)\n\n  // flatten([[a1,b1], [a2,b2], ...]) -> [a1, b1, a2, b2, ...]\n  strings = _.flatten(strings)\n\n  return strings.join('')\n}\n",
    "simple-class-old.js": "\"use strict\"\n\nfunction Animal(name) {\n  this.name = name\n}\n\nAnimal.prototype.speak = function speak() {\n  console.log(\"hi, my name is \" + this.name)\n}\n\nnew Animal(\"Bob\").speak()\n\n// prints: hi, my name is Bob\n",
    "simple-class.js": "\"use strict\"\n\nclass Animal {\n\n  constructor(name) {\n    this.name = name\n  }\n\n  speak() {\n    console.log(`hi, my name is ${this.name}`)\n  }\n}\n\nnew Animal(\"Bob\").speak()\n\n// prints: hi, my name is Bob\n",
    "simple-template.js": "x = \"World\"\ny = \"Hello\"\n\nconsole.log(`${y}, ${x}`)\n// prints \"Hello, World\"\n\nconsole.log(\n`multi\nline\nstrings`\n)\n// prints:\n// multi\n// line\n// strings\n",
    "string-pusher-old.js": "\"use strict\"\n\n\n// old school push-lines-to-array, join-when-done\n\nconst lines = []\n\nlines.push(\"Hello\")\nlines.push(\"line number: \" + (1+1))\nlines.push(\"Later\")\n\nconsole.log(lines.join('\\n'))\n\n// prints:\n//   Hello\n//   line number: 2\n//   Later\n",
    "string-pusher.js": "\"use strict\"\nconst LinePoster = require(\"./Line-Poster\")\n\n// new school push-lines-to-array, join-when-done\n\nconst p = LinePoster()\n\np`Hello`\np`line number: ${1+1}`\np`Later`\n\nconsole.log(p())\n\n// prints:\n//   Hello\n//   line number: 2\n//   Later\n",
    "subclass.js": "\"use strict\"\n\nclass Animal {\n  species() {                 // <----------------\n    throw new Error(\"subclass responsibiity\") // h/t Smalltalk\n  }\n}\n\nclass Frog extends Animal {   // <----------------\n  species() {                 // <----------------\n    return \"frog\"\n  }\n}\n\nconsole.log(new Frog().species())   // prints: frog\nconsole.log(new Animal().species()) // throws error\n",
    "super-calls.js": "\"use strict\"\n\nclass Animal {\n  constructor(name) {\n    this.name = name\n  }\n  speak() {\n    console.log(\"hi, I'm \" + this.name)\n  }\n}\n\nclass Frog extends Animal {\n  constructor(name) {\n    super(name)     // <--------------\n  }\n}\n\nnew Frog(\"Bob\").speak()   // prints: hi, I'm Bob\n"
}